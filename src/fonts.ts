const f = (s: string[]) => s;
export const BLOCK_FONT: Record<string, string[]> = {
  A: f([" █████╗ ", "██╔══██╗", "███████║", "██╔══██║", "██║  ██║", "╚═╝  ╚═╝"]),
  B: f(["██████╗ ", "██╔══██╗", "██████╔╝", "██╔══██╗", "██████╔╝", "╚═════╝ "]),
  C: f([" ██████╗", "██╔════╝", "██║     ", "██║     ", "╚██████╗", " ╚═════╝"]),
  D: f(["██████╗ ", "██╔══██╗", "██║  ██║", "██║  ██║", "██████╔╝", "╚═════╝ "]),
  E: f(["███████╗", "██╔════╝", "█████╗  ", "██╔══╝  ", "███████╗", "╚══════╝"]),
  F: f(["███████╗", "██╔════╝", "█████╗  ", "██╔══╝  ", "██║     ", "╚═╝     "]),
  G: f([" ██████╗ ", "██╔════╝ ", "██║  ███╗", "██║   ██║", "╚██████╔╝", " ╚═════╝ "]),
  H: f(["██╗  ██╗", "██║  ██║", "███████║", "██╔══██║", "██║  ██║", "╚═╝  ╚═╝"]),
  I: f(["██╗", "██║", "██║", "██║", "██║", "╚═╝"]),
  J: f(["     ██╗", "     ██║", "     ██║", "██   ██║", "╚█████╔╝", " ╚════╝ "]),
  K: f(["██╗  ██╗", "██║ ██╔╝", "█████╔╝ ", "██╔═██╗ ", "██║  ██╗", "╚═╝  ╚═╝"]),
  L: f(["██╗     ", "██║     ", "██║     ", "██║     ", "███████╗", "╚══════╝"]),
  M: f(["███╗   ███╗", "████╗ ████║", "██╔████╔██║", "██║╚██╔╝██║", "██║ ╚═╝ ██║", "╚═╝     ╚═╝"]),
  N: f(["███╗   ██╗", "████╗  ██║", "██╔██╗ ██║", "██║╚██╗██║", "██║ ╚████║", "╚═╝  ╚═══╝"]),
  O: f([" ██████╗ ", "██╔═══██╗", "██║   ██║", "██║   ██║", "╚██████╔╝", " ╚═════╝ "]),
  P: f(["██████╗ ", "██╔══██╗", "██████╔╝", "██╔═══╝ ", "██║     ", "╚═╝     "]),
  Q: f([" ██████╗ ", "██╔═══██╗", "██║   ██║", "██║▄▄ ██║", "╚██████╔╝", " ╚══▀▀═╝ "]),
  R: f(["██████╗ ", "██╔══██╗", "██████╔╝", "██╔══██╗", "██║  ██║", "╚═╝  ╚═╝"]),
  S: f(["███████╗", "██╔════╝", "███████╗", "╚════██║", "███████║", "╚══════╝"]),
  T: f(["████████╗", "╚══██╔══╝", "   ██║   ", "   ██║   ", "   ██║   ", "   ╚═╝   "]),
  U: f(["██╗   ██╗", "██║   ██║", "██║   ██║", "██║   ██║", "╚██████╔╝", " ╚═════╝ "]),
  V: f(["██╗   ██╗", "██║   ██║", "██║   ██║", "╚██╗ ██╔╝", " ╚████╔╝ ", "  ╚═══╝  "]),
  W: f(["██╗    ██╗", "██║    ██║", "██║ █╗ ██║", "██║███╗██║", "╚███╔███╔╝", " ╚══╝╚══╝ "]),
  X: f(["██╗  ██╗", "╚██╗██╔╝", " ╚███╔╝ ", " ██╔██╗ ", "██╔╝ ██╗", "╚═╝  ╚═╝"]),
  Y: f(["██╗   ██╗", "╚██╗ ██╔╝", " ╚████╔╝ ", "  ╚██╔╝  ", "   ██║   ", "   ╚═╝   "]),
  Z: f(["███████╗", "╚══███╔╝", "  ███╔╝ ", " ███╔╝  ", "███████╗", "╚══════╝"]),
  " ": f(["        ", "        ", "        ", "        ", "        ", "        "]),
  "!": f(["██╗", "██║", "██║", "╚═╝", "██╗", "╚═╝"]),
  "?": f(["██████╗ ", "╚════██╗", "  ▄███╔╝", "  ▀▀══╝ ", "  ██╗   ", "  ╚═╝   "]),
  ".": f(["   ", "   ", "   ", "   ", "██╗", "╚═╝"]),
  ",": f(["   ", "   ", "   ", "   ", "▄█╗", "╚═╝"]),
  "-": f(["      ", "      ", "█████╗", "╚════╝", "      ", "      "]),
  "0": f([" ██████╗ ", "██╔═████╗", "██║██╔██║", "████╔╝██║", "╚██████╔╝", " ╚═════╝ "]),
  "1": f([" ██╗", "███║", "╚██║", " ██║", " ██║", " ╚═╝"]),
  "2": f(["██████╗ ", "╚════██╗", " █████╔╝", "██╔═══╝ ", "███████╗", "╚══════╝"]),
  "3": f(["██████╗ ", "╚════██╗", " █████╔╝", " ╚═══██╗", "██████╔╝", "╚═════╝ "]),
  "4": f(["██╗  ██╗", "██║  ██║", "███████║", "╚════██║", "     ██║", "     ╚═╝"]),
  "5": f(["███████╗", "██╔════╝", "███████╗", "╚════██║", "███████║", "╚══════╝"]),
  "6": f([" ██████╗ ", "██╔════╝ ", "███████╗ ", "██╔═══██╗", "╚██████╔╝", " ╚═════╝ "]),
  "7": f(["███████╗", "╚════██║", "    ██╔╝", "   ██╔╝ ", "   ██║  ", "   ╚═╝  "]),
  "8": f([" █████╗ ", "██╔══██╗", "╚█████╔╝", "██╔══██╗", "╚█████╔╝", " ╚════╝ "]),
  "9": f([" █████╗ ", "██╔══██╗", "╚██████║", " ╚═══██║", " █████╔╝", " ╚════╝ "]),
  // Hiragana characters
  あ: f([" ▄████╗ ", "██╔═══╝ ", "██████╗ ", "██╔══██╗", "╚█████╔╝", " ╚════╝ "]),
  い: f(["██╗  ███╗", "██║  ██╔╝", "██║  ██║ ", "██║  ██║ ", "██║  ██║ ", "╚═╝  ╚═╝ "]),
  う: f([" ██████╗ ", "██╔════╝ ", "██████╗  ", "╚═══██║  ", " █████╔╝ ", " ╚════╝  "]),
  え: f(["██████╗  ", "██╔═══╝  ", "██████╗  ", "██╔═══╝  ", "███████╗ ", "╚══════╝ "]),
  お: f([" ██████╗ ", "██╔═══██╗", "██║   ██║", "██║   ██║", "╚██████╔╝", " ╚═════╝ "]),
  か: f(["██╗ ███╗ ", "██║ ██╔╝ ", "██████╔╝ ", "██╔══██╗ ", "██║  ██║ ", "╚═╝  ╚═╝ "]),
  き: f(["███╗ ██╗ ", "██╔╝ ██║ ", "██████╔╝ ", "██╔═██╗  ", "██║ ╚██╗ ", "╚═╝  ╚═╝ "]),
  く: f([" ███╗    ", "██╔╝     ", "██║      ", "██║      ", "╚██╗     ", " ╚═╝     "]),
  け: f(["██████╗  ", "██╔═══╝  ", "██████╗  ", "██╔══██╗ ", "██║  ██║ ", "╚═╝  ╚═╝ "]),
  こ: f(["██████╗  ", "╚════██╗ ", "     ██║ ", "██████╔╝ ", "╚═════╝  ", "         "]),
  さ: f(["███████╗ ", "██╔════╝ ", "███████╗ ", "╚════██║ ", "███████║ ", "╚══════╝ "]),
  し: f(["    ███╗ ", "   ██╔╝  ", "  ██╔╝   ", " ██╔╝    ", "██╔╝     ", "╚═╝      "]),
  す: f([" ██████╗ ", "██╔════╝ ", "███████╗ ", "╚════██║ ", " █████╔╝ ", " ╚════╝  "]),
  せ: f(["███████╗ ", "██╔════╝ ", "███████╗ ", "╚══██╔═╝ ", "   ██║   ", "   ╚═╝   "]),
  そ: f([" ███████╗", "██╔════╝ ", "███████╗ ", "╚════██║ ", "█████╔╝  ", "╚════╝   "]),
  た: f(["███████╗ ", "╚══██╔══╝", "   ██║   ", "   ██║   ", "   ██║   ", "   ╚═╝   "]),
  ち: f(["███╗     ", "██╔╝     ", "██████╗  ", "╚═══██║  ", "████╔╝   ", "╚═══╝    "]),
  つ: f([" ███████╗", "██╔════╝ ", "██║      ", "██║   ██╗", "╚██████╔╝", " ╚═════╝ "]),
  て: f(["███████╗ ", "╚══════╝ ", "██╗      ", "██║      ", "╚██████╗ ", " ╚═════╝ "]),
  と: f(["██╗   ██╗", "██║   ██║", "██║   ██║", "██║   ██║", "╚██████╔╝", " ╚═════╝ "]),
  な: f(["███████╗ ", "██╔════╝ ", "██║  ███╗", "██║   ██║", "╚██████╔╝", " ╚═════╝ "]),
  に: f(["███╗  ██╗", "██╔╝  ██║", "██║   ██║", "██║   ██║", "╚██████╔╝", " ╚═════╝ "]),
  ぬ: f([" ██████╗ ", "██╔═══██╗", "██║   ██║", "██║▄▄ ██║", "╚██████╔╝", " ╚══▀▀═╝ "]),
  ね: f([" ██████╗ ", "██╔════╝ ", "██║  ███╗", "██║   ██║", "╚██████╔╝", " ╚═════╝ "]),
  の: f([" ██████╗ ", "██╔═══██╗", "██║   ██║", "██║   ██║", "╚██████╔╝", " ╚═════╝ "]),
};

function isHiragana(char: string): boolean {
  const code = char.charCodeAt(0);
  return code >= 0x3040 && code <= 0x309f;
}

export function textToAsciiArt(text: string): string {
  if (!text) return "\n\n\n\n\n";
  const textLines = text.split("\n");
  const spaceChar = BLOCK_FONT[" "];
  const allAsciiLines: string[][] = [];
  for (let lineIndex = 0; lineIndex < textLines.length; lineIndex++) {
    const textLine = textLines[lineIndex];
    if (!textLine) {
      for (let i = 0; i < 6; i++) allAsciiLines.push([]);
    } else {
      const lines: string[][] = [[], [], [], [], [], []];
      const charArts: string[][] = [];
      for (let charIndex = 0; charIndex < textLine.length; charIndex++) {
        const char = textLine[charIndex];
        const lookupChar = isHiragana(char) ? char : char.toUpperCase();
        charArts[charIndex] = BLOCK_FONT[lookupChar] || spaceChar;
      }
      for (let i = 0; i < 6; i++) {
        for (let charIndex = 0; charIndex < charArts.length; charIndex++) {
          const artLine = charArts[charIndex][i];
          if (artLine) lines[i].push(artLine);
        }
        allAsciiLines.push(lines[i]);
      }
    }
    if (lineIndex < textLines.length - 1) allAsciiLines.push([]);
  }
  return allAsciiLines.map((line) => line.join("")).join("\n");
}
